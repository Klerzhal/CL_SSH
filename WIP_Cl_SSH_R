#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Feb 23 13:19:51 2020

@author: romain
"""

import pandas as pd
import re
from itertools import cycle
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from numpy.random import RandomState
import pylab as pl

#with open('some.csv', 'w', newline='') as f:
#    writer = csv.writer(f)
#    writer.writerows(someiterable)
to_pd=[]

with open("auth.log.anon") as origin:
    for line in origin:
        line = re.sub(' +', ' ', line)
        if "Failed password for" in line:
           to_pd.append([(line).split(' ')[0],(line).split(' ')[1],
                         (line).split(' ')[2],
                         re.findall("\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}",line)[-1],
                         re.findall("\d{4,5}",line)[-1],(line).split(' ')[5]])
        elif "Accepted" in line :
           to_pd.append([(line).split(' ')[0],(line).split(' ')[1],
                         (line).split(' ')[2],
                         re.findall("\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}",line)[-1],
                         re.findall("\d{4,5}",line)[-1],(line).split(' ')[5]])

df = pd.DataFrame(data = to_pd,columns={"Month":[],"Day":[],"Time":[],
                                        "IP":[],"Port":[],"SSH_Status":[]})

df = df.replace({"SSH_Status": {"Failed": False, "Accepted": True}})
df1 = df.groupby('IP')['SSH_Status'].value_counts()
df1 = df1.to_frame()
print(df1)

class clustering:
	def __init__(self):
		self.plot(df1)

	def plot(self, X):
		pca = PCA(n_components=1, whiten=True).fit(X)
		X_pca = pca.transform(X)
		kmeans = KMeans(n_clusters=3, random_state=RandomState(42)).fit(X_pca)
		plot_2D(X_pca, kmeans.labels_, ["A1", "A2"])

def plot_2D(data, target, target_names):
	colors = cycle('rgbcmykw')
	target_ids = range(len(target_names))
	pl.figure()
	for i, c, label in zip(target_ids, colors, target_names):
		pl.scatter(data[target == i, 0], data[target == i, 1],
					c=c, label=label)
	pl.legend()
	pl.show()

if __name__ == '__main__':
	c = clustering()
    
